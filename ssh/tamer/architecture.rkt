#lang scribble/lp2

@(require digimon/tamer)

@(define-rfc-bib HMAC-SHA 4231 "Identifiers and Test Vectors for HMAC-SHA-224, HMAC-SHA-256, HMAC-SHA-384, and HMAC-SHA-512"
   #:author "M. Nystrom"
   #:date   2005)

@handbook-story{The Secure Shell Protocol Architecture}

This section demonstrates the implementation of @cite{SSH-ARCH}.

@;tamer-smart-summary[]

@handbook-scenario{Data Type Representation}

@tamer-repl[
 (mpint '0x0)
 (mpint '0x9a378f9b2e332a7)
 (mpint '0x80)
 (mpint '0x-1234)
 (mpint '0x-deadbeef)]

@tamer-repl[
 (namelist '())
 (namelist '(zlib))
 (namelist '(zlib none))]

@;handbook-scenario{Psuedo-Random Number Generation}

@handbook-scenario{Host Key Algorithms}

This testcase is generated by @cite{OpenSSL}.

@tamer-racketbox[(digimon-path "tamer" "stone" "openssl_rsa.pem")]

@tamer-repl[
 (define pem (read-rsa openssl-rsa.pem))
 (rsa-key-okay? pem)
 (rsa-pretty-display pem 24)
 (define message (file->bytes (digimon-path "tamer" "stone" "openssl_rsa.pub")))
 (define signature (rsa-sign pem message pkcs#1-id-sha1))
 (bytes=? signature (file->bytes (digimon-path "tamer" "stone" "openssl_rsa_sha1.sign")))
 (rsa-verify pem message signature pkcs#1-id-sha1)]

@handbook-scenario[#:tag "confidentiality"]{Confidentiality}

The cipher algorithms implemented are documented in their own chaper: @secref{Confidentiality}.

@handbook-scenario{Data Integrity Algorithms}

These test cases are defined in @~cite[HMAC-SHA].

@tamer-repl[
 (HMAC testcase1-256 hmac-sha256 (make-bytes 20 #x0B) #"Hi There")
 (HMAC testcase2-256 hmac-sha256 #"Jefe" #"what do ya want for nothing?")
 (HMAC testcase3-256 hmac-sha256 (make-bytes 20 #xAA) (make-bytes 50 #xDD))
 (HMAC testcase4-256 hmac-sha256 (apply bytes (range #x01 #x1A)) (make-bytes 50 #xCD))
 (HMAC testcase5-256 hmac-sha256-128 (make-bytes 20 #x0C) #"Test With Truncation")
 (HMAC testcase6-256 hmac-sha256 (make-bytes 131 #xAA) #"Test Using Larger Than Block-Size Key - Hash Key First")
 (HMAC testcase7-256 hmac-sha256 (make-bytes 131 #xAA) #"This is a test using a larger than block-size key and a larger than block-size data. The key needs to be hashed before being used by the HMAC algorithm.")]

@handbook-reference[]

@; Chunks after `handbook-reference[]` will never be rendered in documents
@; <*> is the main chunk by convention.

@chunk[|<*>|
       (require digimon/tamer)
       (tamer-taming-start!)

       (module+ tamer
         <datatype>)]

@chunk[<datatype>
       (require "../datatype.rkt")
       (require "../digitama/fsio/rsa.rkt")
       (require "../digitama/algorithm/rsa.rkt")
       (require "../digitama/algorithm/hmac.rkt")
       
       (require "../digitama/algorithm/pkcs1/hash.rkt")
       (require "../digitama/algorithm/pkcs1/emsa-v1_5.rkt")
       (require "../digitama/algorithm/pkcs1/primitive.rkt")

       (define openssl-rsa.pem (digimon-path "tamer" "stone" "openssl_rsa.pem"))

       (define testcase1-256 "b0344c61d8db38535ca8afceaf0bf12b881dc200c9833da726e9376c2e32cff7")
       (define testcase2-256 "5bdcc146bf60754e6a042426089575c75a003f089d2739839dec58b964ec3843")
       (define testcase3-256 "773ea91e36800e46854db8ebd09181a72959098b3ef8c122d9635514ced565fe")
       (define testcase4-256 "82558a389a443c0ea4cc819899f2083a85f0faa3e578f8077a2e3ff46729665b")
       (define testcase5-256 "a3b6167473100ee06e0c796c2955552b")
       (define testcase6-256 "60e431591ee0b67f0d8a26aacbf5b77f8e0bc6213728c5140546040f0ee37f54")
       (define testcase7-256 "9b09ffa71b942fcb27635fbcd5b0e944bfdc63644f0713938a7f51535c3a35e2")
       
       (define octets->integer
         (lambda [os]
           (pkcs#1-octets->integer (apply bytes (map symb0x->number (flatten os))))))

       (define symb0x->octets
         (lambda [i]
           (apply bytes
                  (for/list ([pair (in-list (regexp-match* #px".." (substring (symbol->string i) 2)))])
                    (string->number pair 16)))))
       
       (define mpint
         (lambda [hex]
           (define raw (~a hex))
           (define mphex (string->number (substring raw 2) 16))
           (define bs (ssh-mpint->bytes mphex))
           (define-values (restored _) (ssh-bytes->mpint bs))
           (cons (number->symb0x restored) (bytes->hexstring bs #:separator " "))))

       (define namelist
         (lambda [names]
           (define size (ssh-namelist-length names))
           (define bs (make-bytes size))

           (ssh-namelist->bytes names bs)
           
           (define-values (restored _) (ssh-bytes->namelist bs))
           (cons restored (bytes->hexstring bs #:separator " "))))
       
       (define HMAC
         (lambda [digest hmac-sha256 key message]
           (printf "Key  = ~a (~a Bytes)~n" (bytes->hexstring key) (bytes-length key))
           (printf "Data = ~a (~a Bytes)~n" (bytes->hexstring message) (bytes-length message))
           (printf "~s~n" digest)

           (bytes->hexstring ((hmac-sha256 key) message))))]
